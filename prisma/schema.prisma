generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Note {
  id         String     @id @default(cuid()) @map("_id")
  slug       String     @unique
  title      String
  excerpt    String
  content    String
  noteStatus NoteStatus @default(DRAFT)
  views      Int        @default(0)
  public_id  String?
  url        String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User?      @relation(fields: [userId], references: [id])
  userId     String?
  Category   Category?  @relation(fields: [categoryId], references: [id])
  categoryId String?
  comment    Comment[]
}

model Category {
  id        String   @id @default(cuid()) @map("_id")
  name      String
  slug      String   @unique
  notes     Note[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  desc      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  noteId    String
  note      Note     @relation(fields: [noteId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NoteStatus {
  DRAFT
  PUBLISHED
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  image_id      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  Note          Note[]
  Comment       Comment[]
}

enum UserRole {
  ADMIN
  USER
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
